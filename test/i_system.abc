
.export	_Nil _Cons
.export e_system_dAP e_system_nAP e_system_eaAP
.export _cycle_in_spine _hnf
.export _match_error selector_m_error
.export	_Tuple
.export _print_graph
.export _driver

|.desc _Tuple	_hnf	_hnf	32 0	"_Tuple"
.desc _Tuple	_hnf	_hnf	12 0	"_Tuple"
.desc _Nil	_hnf	_hnf	0	0 "Nil"
.desc _Cons	_hnf	l_Cons	2	0 "Cons"

.desc e_system_dAP	_hnf	e_system_lAP	2 0	"AP"

.desc e_system_dind	e_system_nind	_hnf	0 0	"_ind"

.desc ARRAY	_hnf	_hnf	1 0	"ARRAY"

.export	d_S.1 d_S.2 d_S.3 d_S.4 d_S.5 d_S.6
.export	n_S.1 n_S.2 n_S.3 n_S.4 n_S.5 n_S.6
.export	ea_S.1 ea_S.2 ea_S.3 ea_S.4 ea_S.5 ea_S.6

e_system_nind
	halt

.o 0 2 i i
_match_error
	print	"Run time error, rule \'"
	|printD
	print	"\' in module \'"
	|printD
	print	"\' does not match\n"
	halt

.o 0 0
selector_m_error
	print	"Run time error, selector does not match"
	halt

.a 2 ea_Cons
.o 2 0
l_Cons
	push_args 0 1 1
	update_a 2 1
	create
	update_a 0 3
	pop_a 1
	fillh _Cons 2 2
.d 1 0
	rtn

.o 3 0
ea_Cons
	fillh _Cons 2 2
.d 1 0
	rtn

.export _Conssts n_Conssts ea_Conssts
.desc _Conssts n_Conssts l_Conssts 2 0 "Cons!!"

.a 2 ea_Conssts
.o 2 0
l_Conssts
	push_args 0 1 1
	update_a 2 1
	create
	update_a 0 3
	pop_a 1
	jsr_eval 1
	jsr_eval 0
	fill _Cons 2 _hnf 2
.d 1 0
	rtn

.n 2 _Conssts ea_Conssts
.o 1 0
n_Conssts
	push_node _cycle_in_spine 2
.o 3 0
ea_Conssts
	jsr_eval 1
	jsr_eval 0
	fill _Cons 2 _hnf 2
.d 1 0
	rtn

.export _Consbts
.record _Consbts lba 1 1 "[#Bool!]"

.export _Consa
.record _Consa laa 2 0 "[#{}]"

.descs d_S.1 n_S.1 _ 1 0 "_S.1"
.n -1 d_S.1 ea_S.1
.o 1 0
n_S.1
	push_node _cycle_in_spine 1
	jsr_eval 0
	repl_args 1 1
	jsr_eval 0
.d 1 0
	fill_a01_pop_rtn
.o 2 0
ea_S.1
	push_arg	0 1 1
	push_a	2
.keep 1 0
	fill	e_system_dind -2 e_system_nind 2
.keep 1 0
	updatepop_a 0 1
	jsr_eval 0
	repl_args 1 1
	jmp_eval_upd

.o 1 0
o_S.1
	repl_args 1 1
.d 1 0
	rtn

.descs d_S.2 n_S.2 _ 2 0 "_S.2"
.n -1 d_S.2 ea_S.2
.o 1 0
n_S.2
	push_node _cycle_in_spine 1
	jsr_eval 0
	get_node_arity 0
	jmp_neI_b 2 0 n_S.2_
	pop_b 1
	repl_arg 2 2
	jsr_eval 0
.d 1 0
	fill_a01_pop_rtn
n_S.2_
	pop_b 1
	repl_arg 3 2
	jsr_eval 0
.d 1 0
	fill_a01_pop_rtn
.o 2 0
ea_S.2
	push_arg	0 1 1
	push_a	2
.keep 1 0
	fill	e_system_dind -2 e_system_nind 2
.keep 1 0
	updatepop_a 0 1
	jsr_eval 0
	get_node_arity	0
	jmp_neI_b 2 0 ea_S.2_
	pop_b 1
	repl_arg 2 2
	jmp_eval_upd
ea_S.2_
	repl_arg 3 2
	pop_b 1
	jmp_eval_upd

.o 1 0
o_S.2
	get_node_arity	0
	jmp_neI_b 2 0 o_S.2_
	pop_b 1
	repl_arg 2 2
.d 1 0
	rtn
o_S.2_
	repl_arg 3 2
.d 1 0
	pop_b_rtn 1

.descs d_S.3 n_S.3 _ 4 0 "_S.3"
.n -1 d_S.3 ea_S.3
.o 1 0
n_S.3
	push_node _cycle_in_spine 1
	jsr_eval 0
	repl_arg 3 3
	jsr_eval 0
.d 1 0
	fill_a01_pop_rtn

.o 2 0
ea_S.3
	push_arg	0 1 1
	push_a	2
.keep 1 0
	fill	e_system_dind -2 e_system_nind 2
.keep 1 0
	updatepop_a 0 1
	jsr_eval 0
	repl_arg 3 3
	jmp_eval_upd

.o 1 0
o_S.3
	repl_arg 3 3
.d 1 0
	rtn

.descs d_S.4 n_S.4 _ 5 0 "_S.4"
.n -1 d_S.4 ea_S.4
.o 1 0
n_S.4
	push_node _cycle_in_spine 1
	jsr_eval 0
	repl_arg 4 4
	jsr_eval 0
.d 1 0
	fill_a01_pop_rtn

.o 2 0
ea_S.4
	push_arg	0 1 1
	push_a	2
.keep 1 0
	fill	e_system_dind -2 e_system_nind 2
.keep 1 0
	updatepop_a 0 1
	jsr_eval 0
	repl_arg 4 4
	jmp_eval_upd

.o 1 0
o_S.4
	repl_arg 4 4
.d 1 0
	rtn

.descs d_S.5 n_S.5 _ 5 0 "_S.5"
.n -1 d_S.5 ea_S.5
.o 1 0
n_S.5
	push_node _cycle_in_spine 1
	jsr_eval 0
	repl_arg 5 5
	jsr_eval 0
.d 1 0
	fill_a01_pop_rtn

.o 2 0
ea_S.5
	push_arg	0 1 1
	push_a	2
.keep 1 0
	fill	e_system_dind -2 e_system_nind 2
.keep 1 0
	updatepop_a 0 1
	jsr_eval 0
	repl_arg 5 5
	jmp_eval_upd

.o 1 0
o_S.5
	repl_arg 5 5
.d 1 0
	rtn

.descs d_S.6 n_S.6 _ 6 0 "_S.6"
.n -1 d_S.6 ea_S.6
.o 1 0
n_S.6
	push_node _cycle_in_spine 1
	jsr_eval 0
	repl_arg 6 6
	jsr_eval 0
.d 1 0
	fill_a01_pop_rtn

.o 2 0
ea_S.6
	push_arg	0 1 1
	push_a	2
.keep 1 0
	fill	e_system_dind -2 e_system_nind 2
.keep 1 0
	updatepop_a 0 1
	jsr_eval 0
	repl_arg 6 6
	jmp_eval_upd

.o 1 0
o_S.6
	repl_arg 6 6
.d 1 0
	rtn

.o 0 0
e_system_lAP
	print	"Error: lazy entry of AP entered"
	halt

.o 3 0
e_system_eaAP
.d 2 0
	jmp	ea_AP

.n 2 e_system_dAP e_system_eaAP
.o 1 0
e_system_nAP
	push_node	_cycle_in_spine 2
.o 2 0
ea_AP
	jsr_eval 0
	jsr_ap 1
	fill_a	0 1
.d 1 0
	pop_a_rtn 1

.o 1 0			
_hnf
.d 1 0
	rtn

_driver
.d 1 0
	jsr	_print
.o 0 0
	halt

.o 1 0
_print_graph
.d 1 0
	jsr	_print
.o 0 0
	print_sc	"\n"
.d 0 0
	rtn

.o 1 0
_print
	pushI 0	| push the bracket count
_continue_print
	jsr_eval 0

	get_node_arity 0
	eqI_b 0 0
	jmp_true _print_last

	eq_desc	_Cons 2 0
	jmp_true _print_list

	print_sc	"("
	print_symbol_sc	0
	eqI_b 1 0
	jmp_true _print_1
	eqI_b 2 0
	jmp_true _print_2

	jmp _print_last

_print_1
	repl_args 1 1
	jmp	_print_args

_print_2
	repl_args 2 2

_print_args
	print_sc	" "
	eqI_b	1 0	| check if last argument
	jmp_true	_print_last_arg
.d 1 0
	jsr	_print
.o 0 0
|	decI		| decrease argument count
	pushI -1
	addI		| decrease argument count
	jmp	_print_args
_print_last_arg
	pop_b	1	| remove argument count
|	incI		| increment bracket count
	pushI 1
	addI		| increment bracket count
	jmp	_continue_print	| optimised tail recursion!

_print_last
	pop_b 1
	print_symbol_sc	0
	pop_a 1

_print_brackets
	eqI_b	0 0	| stop printing brackets if
	jmp_true	_exit_brackets	| bracket count is zero
	print_sc	")"
|	decI		| decrement bracket count
	pushI -1
	addI		| decrement bracket count
	jmp	_print_brackets
_exit_brackets
	pop_b	1	| remove bracket count
.d 0 0
	rtn

_print_list
	pop_b	1
	print_sc	"["
_print_rest_list
	repl_args	2 2
.d 1 0
	jsr	_print
.o 0 0
	jsr_eval 0
	eq_desc	_Nil 0 0
	jmp_true	_print_last_list
	print_sc	","
	jmp	_print_rest_list
_print_last_list
	print_sc	"]"
	pop_a	1
	jmp	_print_brackets

.n 0 _
_cycle_in_spine
	halt
